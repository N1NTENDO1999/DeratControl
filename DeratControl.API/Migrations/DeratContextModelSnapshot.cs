// <auto-generated />
using System;
using DeratControl.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeratControl.API.Migrations
{
    [DbContext(typeof(DeratContext))]
    partial class DeratContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeratControl.Domain.Entities.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Perimeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<int>("FacilityId");

                    b.Property<int>("PerimeterType");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("Perimeters");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("Location");

                    b.Property<int>("Order");

                    b.Property<int>("PerimeterId");

                    b.Property<int?>("TrapId");

                    b.HasKey("Id");

                    b.HasIndex("PerimeterId");

                    b.HasIndex("TrapId")
                        .IsUnique()
                        .HasFilter("[TrapId] IS NOT NULL");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("FacilityId");

                    b.Property<DateTime?>("FinishedAt");

                    b.Property<DateTime?>("PostponedTo");

                    b.Property<DateTime?>("StartedAt");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Trap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TrapType");

                    b.HasKey("Id");

                    b.ToTable("Traps");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.TrapReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<int>("PointId");

                    b.Property<int?>("ReviewId");

                    b.Property<int>("TrapReviewId");

                    b.Property<int>("TrapRewiewState");

                    b.HasKey("Id");

                    b.HasIndex("PointId");

                    b.HasIndex("ReviewId");

                    b.ToTable("TrapReviews");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.TrapReviewImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy");

                    b.Property<int>("TrapReviewId");

                    b.HasKey("Id");

                    b.HasIndex("TrapReviewId");

                    b.ToTable("TrapReviewImage");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Facility", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.Organization", "Organization")
                        .WithMany("Facilities")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Perimeter", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.Facility", "Facility")
                        .WithMany("Perimeters")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Point", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.Perimeter", "Perimeter")
                        .WithMany("TrapPoints")
                        .HasForeignKey("PerimeterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeratControl.Domain.Entities.Trap", "Trap")
                        .WithOne("TrapPoint")
                        .HasForeignKey("DeratControl.Domain.Entities.Point", "TrapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.Review", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.User", "AssignedEmployee")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DeratControl.Domain.Entities.Facility", "Facility")
                        .WithMany("Reviews")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.TrapReview", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.Point", "Point")
                        .WithMany("ListOfReviews")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DeratControl.Domain.Entities.Review", "Review")
                        .WithMany("ListOfTrapsToReview")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.TrapReviewImage", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.TrapReview", "TrapReview")
                        .WithMany("ListOfImages")
                        .HasForeignKey("TrapReviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DeratControl.Domain.Entities.User", b =>
                {
                    b.HasOne("DeratControl.Domain.Entities.Organization", "Organization")
                        .WithMany("ContactPeople")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DeratControl.Domain.Entities.UserRole", "UserRole", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("RoleId")
                                .HasColumnName("UserRoleId");

                            b1.Property<string>("RoleName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.HasOne("DeratControl.Domain.Entities.User")
                                .WithOne("UserRole")
                                .HasForeignKey("DeratControl.Domain.Entities.UserRole", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
